scale_color_manual(values = c('#006666','#E69F00')) + xlab("Expression in condition A") + ylab("Expression in condition B") + ggtitle("2 dimentional expression data") + geom_density_2d(n=20)
ggplot(data = df, aes(x=X, y = Y, color=as.factor(cluster))) + geom_point() +
scale_color_manual(values = c('#006666','#E69F00')) + xlab("Expression in condition A") + ylab("Expression in condition B") + ggtitle("2 dimentional expression data") + geom_density_2d(n=200)
ggplot(data = df, aes(x=X, y = Y, color=as.factor(cluster))) + geom_point() +
scale_color_manual(values = c('#006666','#E69F00')) + xlab("Expression in condition A") + ylab("Expression in condition B") + ggtitle("2 dimentional expression data") + geom_density_2d(linemitre =2)
ggplot(data = df, aes(x=X, y = Y, color=as.factor(cluster))) + geom_point() +
scale_color_manual(values = c('#006666','#E69F00')) + xlab("Expression in condition A") + ylab("Expression in condition B") + ggtitle("2 dimentional expression data") + geom_density_2d(linemitre =2, show.legend = F)
ggplot(data = df, aes(x=X, y = Y, color=as.factor(cluster))) + geom_point() +
scale_color_manual("Groups",values = c('#006666','#E69F00')) + xlab("Expression in condition A") + ylab("Expression in condition B") + ggtitle("2 dimentional expression data") + geom_density_2d(linemitre =2, show.legend = F)
library(ggplot2)
library(gridExtra)
setwd("~/Documents/CombinatoireFeNCO2/Analyses")
load("Data/DEGsListsFiltered.RData")
nGenes <- read.table("./Data/N_regulated_genes.txt", h=TRUE, sep = '\t')
View(nGenes)
toupper("dt4")
toupper(nGenes)
nGenes$Wang_2004 <- toupper(nGenes$Wang_2004)
nGenes$HN_induced_Widiez_2011 <- toupper(nGenes$HN_induced_Widiez_2011)
library(ggVennDiagram)
VennDiagram(nGenes))
VennDiagram(nGenes)
ggVennDiagram(nGenes)
ggVennDiagram(nGenes) + scale_fill_gradient()
ggVennDiagram(nGenes) + scale_fill_continuous()
getOption("ggplot2.continuous.colour")
getOption("ggplot2.continuous.colour", default = "gradient")
ggVennDiagram(nGenes) + scale_fill_viridis()
ggVennDiagram(nGenes) + scale_fill_viridis_c()
ggVennDiagram(nGenes) + scale_fill_distiller()
ggVennDiagram(nGenes) + scale_fill_distiller(palette = "Spectral")
ggVennDiagram(nGenes) + scale_fill_distiller(palette = "Spectral") + ggtitle("Common genes")
ggVennDiagram(nGenes) + scale_fill_distiller(palette = "Spectral") + ggtitle("Common genes of nitarte pathways")
ggVennDiagram(nGenes) + scale_fill_distiller(palette = "Spectral") + ggtitle("Common genes of nitrate pathways")
data.frame(DEGs)
length(DEGs)
lengths(DEGs)
df <- data.frame(Comparison = names(DEGs), DEGs = lengths(DEGs))
View(df)
getCommonGenes <- function(comp, littG){
return(length(intersect(DEGs[[comp]], nGenes[,littG])))
}
getCommonGenes("cNf CNf", "Wang_2014")
littG = "Wang_2014"
comp = "cNf CNf"
DEGs[[comp]]
nGenes[,littG]
getCommonGenes(comp = "cNf CNf", littG = "Wang_2004")
sapply(X = df$Comparison,getCommonGenes, "Wang_2004")
df$Comparison
getCommonGenes(comp = "cnF CnF", littG = "Wang_2004")
apply(X = df$Comparison,getCommonGenes, "Wang_2004")
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
getCommonGenes(comp = "cnF CnF", littG = "Wang_2004")
getCommonGenes(df$Comparison, littG = "Wang_2004")
getCommonGenes <- function(comp, littG){
print(comp)
return(length(intersect(DEGs[[comp]], nGenes[,littG])))
}
sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
getCommonGenes <- function(comp, littG){
print(comp)
print(length(intersect(DEGs[[comp]], nGenes[,littG])))
return(length(intersect(DEGs[[comp]], nGenes[,littG])))
}
sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
getCommonGenes <- function(comp, littG){
print(comp)
print(length(intersect(DEGs[[as.character(comp)]], nGenes[,littG])))
return(length(intersect(DEGs[[comp]], nGenes[,littG])))
}
sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
getCommonGenes <- function(comp, littG){
print(comp)
print(length(intersect(DEGs[[as.character(comp)]], nGenes[,littG])))
return(length(intersect(DEGs[[as.character(comp)]], nGenes[,littG])))
}
sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
getCommonGenes <- function(comp, littG){
return(length(intersect(DEGs[[as.character(comp)]], nGenes[,littG])))
}
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Marchive_2013_20min <- sapply(X = df$Comparison,getCommonGenes, littG ="Marchive_2013_20min")
df$HN_induced_Widiez_2011 <- sapply(X = df$Comparison,getCommonGenes, littG ="HN_induced_Widiez_2011")
getCommonGenes <- function(comp, littG){
return(length(intersect(DEGs[[as.character(comp)]], nGenes[,littG]))/length(DEGs[[as.character(comp)]])*100)
}
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Marchive_2013_20min <- sapply(X = df$Comparison,getCommonGenes, littG ="Marchive_2013_20min")
df$HN_induced_Widiez_2011 <- sapply(X = df$Comparison,getCommonGenes, littG ="HN_induced_Widiez_2011")
d<- melt(df, silent=T)
library(reshape2)
d<- melt(df, silent=T)
ggplot(data <- df, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity")
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Marchive_2013_20min <- sapply(X = df$Comparison,getCommonGenes, littG ="Marchive_2013_20min")
df$HN_induced_Widiez_2011 <- sapply(X = df$Comparison,getCommonGenes, littG ="HN_induced_Widiez_2011")
nGenes$HN_induced_Widiez_2011
d<- melt(df, silent=T)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity")
df <- data.frame(Comparison = names(DEGs), DEGs = lengths(DEGs))
getCommonGenes <- function(comp, littG){
return(length(intersect(DEGs[[as.character(comp)]], nGenes[,littG]))/length(DEGs[[as.character(comp)]])*100)
}
df$Wang_2004 <- sapply(X = df$Comparison,getCommonGenes, littG ="Wang_2004")
df$Marchive_2013_20min <- sapply(X = df$Comparison,getCommonGenes, littG ="Marchive_2013_20min")
df$HN_induced_Widiez_2011 <- sapply(X = df$Comparison,getCommonGenes, littG ="HN_induced_Widiez_2011")
library(reshape2)
d<- melt(df, silent=T)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity")
d<- melt(df[,!grepl("DEGs", colnames(df))], silent=T)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity")
d$Factor <-
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable, aplha = 0.6), position = "dodge", stat="identity")
d$Factor <-
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable, alpha = 0.6), position = "dodge", stat="identity")
d$Factor <-
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable, alpha = 0.6), position = "dodge", stat="identity")
d$Factor <-
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.6)
df$Factor <- c(rep("CO2", 4),rep("Nitrate", 4),rep("Iron", 4))
d<- melt(df[,!grepl("DEGs", colnames(df))], silent=T)
d$Factor <-
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.6) + facet_wrap(~Factor)
d$Factor <-
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.6) + facet_wrap(~Factor)
d<- melt(df[,!grepl("DEGs", colnames(df))], silent=T)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.6) + facet_wrap(~Factor)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.7) + facet_wrap(~Factor)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.7) + facet_wrap(~Factor, nrow = 3)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.7) + facet_wrap(~Factor, nrow = 1)
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.7) + facet_wrap(~Factor, nrow = 1)
+theme(strip.text.x = element_text(size = 26), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 26, angle = 320, hjust = 0, colour = "grey50"),
axis.title=element_text(size=17)) + ylab("Percentage of common genes") +
ggtitle(paste("% of genes in each list for each DE analysis"))
ggplot(data <- d, aes(x=Comparison, y = value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity", alpha = 0.7) + facet_wrap(~Factor, nrow = 1) +theme(strip.text.x = element_text(size = 26), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 26, angle = 320, hjust = 0, colour = "grey50"),
axis.title=element_text(size=17)) + ylab("Percentage of common genes") +
ggtitle(paste("% of genes in each list for each DE analysis"))
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"),paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
DEGs <- DEGs[["cnF", "CnF"]]
DEGs <- DEGs[["cnF CnF"]]
genes <- unique(unlist(DEGs))
load("./Data/normalized.count_At.RData")
load("./Data/AGIToEntrez.RDAta")
load("./Data/filteredData.RData")
load("./Data/DEGsListsFiltered.RData")
source("./Imports/ToolFunctions.R")
source("./Imports/VisuFunctions.R")
#cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 7:14)
cluster <- clustering(genes, data, nb_clusters = 7:14, norm = "TMM")
results <- cluster[[2]]
cluster[[2]]
results@y_profiles
results@allResults
results@y_profiles
plot(run_pois, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- plots$profiles
prfoiles + ggtitle("coucou")
profiles + ggtitle("coucou")
clusters <- cluster[[1]]
results@y_profiles
profiles <- results@y_profiles
d <- melt(profiles)
View(d)
View(AGIToEntrez)
profiles <- data.frame(results@y_profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot()
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(fill = variable)
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(fill = group)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot()
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)
profiles
profiles$gene <- rownames(profiles)
clusters
clusters[match(profiles$gene, names(clusters))]
match(profiles$gene, names(clusters))
profiles$cluster <- clusters[match(profiles$gene, names(clusters))]
d <- melt(profiles)
profiles$cluster <- clusters[match(profiles$gene, names(clusters))]
d <- melt(profiles)
d$cluster <- clusters[match(d$gene, names(clusters))]
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7) + facet_wrap(~cluster)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7) + facet_wrap(~cluster)
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
profiles$cluster <- clusters[match(profiles$gene, names(clusters))]
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7) + facet_wrap(~cluster)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.2)
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.2)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, aplha=0.3)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, alpha=0.3)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, alpha=0.03)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, alpha=0.01)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster)
ggplot(data = d, aes(x=group, y=value, fill = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3)
ggplot(data = d, aes(x=group, y=value, color = group)) + geom_boxplot(alpha=0.7)  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3)
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group))  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3)
k = 1
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group))  + geom_jitter(width = 0.1, alpha=0.01) +
ylim(0, 0.3)
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group))  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group, fill="grey"))  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group, fill="red"))  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3)
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
nGenes <- read.table("./Data/N_regulated_genes.txt", h=TRUE, sep = '\t')
nGenes$Wang_2004 <- toupper(nGenes$Wang_2004)
nGenes$HN_induced_Widiez_2011 <- toupper(nGenes$HN_induced_Widiez_2011)
save(nGenes, file = "./Data/NitrateGenes.RData")
cluster[[1]][grpl(k, names(cluster[[1]]))]
cluster[[1]][grepl(k, names(cluster[[1]]))]
cluster[[1]]
cluster[[1]][cluster[[1]]==k]
plotProfile(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
}
}
plotProfile(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
}
}
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.3)
}
}
plotProfile(cluster)
plotProfile(cluster, k = 6)
plotProfile(cluster, k = 7)
plotProfile(cluster, k = 2)
plotProfile(cluster, k = 1)
plotProfile(cluster, k = 10)
plotProfile(cluster, k = 12)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
ylim(0, 0.25)
}
}
plotProfile(cluster, k = 12)
plotProfile <- function(cluster, k="none"){
# plot all the profiles or the profile of cluster k
results <- cluster[[2]]
clusters <- cluster[[1]]
#plots <- plot(results, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots"))
profiles <- data.frame(results@y_profiles)
profiles$gene <- rownames(profiles)
d <- melt(profiles)
d$group <- str_split_fixed(d$variable, '_', 2)[,1]
d$cluster <- clusters[match(d$gene, names(clusters))]
if(k=="none"){
ggplot(data = d, aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes( color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.01) +facet_wrap(~cluster) +
ylim(0, 0.3) + scale_colour_discrete("Condition")
}
else{
ggplot(data = d[d$cluster==k,], aes(x=group, y=value)) + geom_boxplot(alpha=0.7, aes(color = group), fill = "grey")  + geom_jitter(width = 0.1, alpha=0.02) +
scale_colour_discrete("Condition")
}
}
plotProfile(cluster, k = 12)
plotProfile(cluster, k = 5)
plotProfile(cluster)
nGenes
res <- data.frame(Gene = genesK)
genesK <- names(cluster[[1]][cluster[[1]]==k])
res <- data.frame(Gene = genesK)
res$Wang_2004 = ifelse(res$Gene %in% nGenes$Wang_2004, 1, 0)
res$Marchive_2013 = ifelse(res$Gene %in% nGenes$Marchive_2013_20min, 1, 0)
res$Widiez_2011 = ifelse(res$Gene %in% nGenes$HN_induced_Widiez_2011, 1, 0)
View(res)
View(AGIToEntrez)
res$entrez <- AGIToEntrez[match(res$Gene, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
nitrateGenes <- unique(c(nGenes$Wang_2004, nGenes$Marchive_2013_20min, nGenes$HN_induced_Widiez_2011))
nitrateEntrez <- AGIToEntrez[match(nitrateGenes, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
ontologyNitrate <- OntologyProfile(nitrateEntrez)
ontologyNitrate <- OntologyProfile(ids = nitrateEntrez)
OntologyProfile <- function(ids, specie="At", plot = T){
#Plot ontology enrichment stats of a given a set of entrezgene IDs
# only for Arabidopsis
if(specie == "At"){
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = ids, mart = mart)
results <- results[!rownames(results) %in% which(duplicated(results$ensembl_gene_id)), ]
return(results)
}
}
ontologyNitrate <- OntologyProfile(ids = nitrateEntrez)
ids = nitrateEntrez
suppressMessages(library(biomaRt))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = ids, mart = mart)
ids
nGenes
View(nGenes)
match(nitrateGenes, AGIToEntrez$ensembl_gene_id)
nitrateGenes[500]
nitrateGenes[500/700]
nitrateGenes[500:700]
nitrateGenes
nGenes$Marchive_2013_20min
na.omit(nGenes$Marchive_2013_20min)
as.vector(nGenes$Marchive_2013_20min)
na.omit(as.vector(nGenes$Marchive_2013_20min))
nitrateGenes <- unique(c(nGenes$Wang_2004, as.vector(nGenes$Marchive_2013_20min), nGenes$HN_induced_Widiez_2011))
nitrateGenes <- unique(c(as.vector(nGenes$Wang_2004), as.vector(nGenes$Marchive_2013_20min), as.vector(nGenes$HN_induced_Widiez_2011)))
nitrateGenes[500:700]
nitrateGenes <- unique(c(as.vector(nGenes$Wang_2004), as.vector(nGenes$Marchive_2013_20min), as.vector(nGenes$HN_induced_Widiez_2011)))
nitrateGenes[500:700]
nitrateEntrez <- AGIToEntrez[match(nitrateGenes, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
ontologyNitrate <- OntologyProfile(ids = nitrateEntrez)
ids
nitrateGenes
tail(nitrateGenes)
nitrateGenes <- grepl("AT",unique(c(as.vector(nGenes$Wang_2004), as.vector(nGenes$Marchive_2013_20min), as.vector(nGenes$HN_induced_Widiez_2011))))
nitrateGenes <- grepl("AT", nitrateGenes)
nitrateGenes <- unique(c(as.vector(nGenes$Wang_2004), as.vector(nGenes$Marchive_2013_20min), as.vector(nGenes$HN_induced_Widiez_2011)))
which(grepl("AT", nitrateGenes))
nitrateGenes[grepl("AT", nitrateGenes)]
nitrateGenes <- nitrateGenes[grepl("AT", nitrateGenes)]
nitrateEntrez <- AGIToEntrez[match(nitrateGenes, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
nitrateGenes
nitrateEntrez
nitrateEntrez <- AGIToEntrez[match(nitrateGenes, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
ontologyNitrate <- OntologyProfile(ids = nitrateEntrez)
View(ontologyNitrate)
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = ids, mart = mart)
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = as.character(ids), mart = mart)
View(results)
as.character(ids)
ids
ids = nitrateEntrez
ids
ontologyNitrate <- OntologyProfile(na.omit(ids) = nitrateEntrez)
ontologyNitrate <- OntologyProfile(ids = na.omit(nitrateEntrez))
na.omit(nitrateEntrez)
as.vector(na.omit(nitrateEntrez))
ontologyNitrate <- OntologyProfile(ids = as.vector(na.omit(nitrateEntrez)))
OntologyProfile <- function(ids, specie="At", plot = T){
#Plot ontology enrichment stats of a given a set of entrezgene IDs
# only for Arabidopsis
if(specie == "At"){
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = as.numeric(ids), mart = mart)
results <- results[!rownames(results) %in% which(duplicated(results$ensembl_gene_id)), ]
return(results)
}
}
ontologyNitrate <- OntologyProfile(ids = as.vector(na.omit(nitrateEntrez)))
ontologyNitrate <- OntologyProfile(ids = nitrateGenes)
nitrateGenes
ids = nitrateGenes
OntologyProfile <- function(ids, specie="At", plot = T){
#Plot ontology enrichment stats of a given a set of ensembl_gene_ids
# only for Arabidopsis
if(specie == "At"){
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = ids, mart = mart)
results <- results[!rownames(results) %in% which(duplicated(results$ensembl_gene_id)), ]
return(results)
}
}
ontologyNitrate <- OntologyProfile(ids = nitrateGenes)
View(ontologyNitrate)
save(ontologyNitrate, file = "./Data/OntologyNitrate.RData")
ontologies <- OntologyProfile(ids = AGIToEntrez$ensembl_gene_id)
save(ontologies, file = "./Data/OntologyAllGenes.RData")
load("./Data/OntologyAllGenes.RData")
View(ontologies)
ontologies[match(res$Gene, ontologies$ensembl_gene_id),c("external_gene_name", "description")]
res[,c("Name", "Description")] <- ontologies[match(res$Gene, ontologies$ensembl_gene_id),c("external_gene_name", "description")]
rowSums(res[,grepl("_", colnames(res))])
res$NitrateScore <- rowSums(res[,grepl("_", colnames(res))])
res <- res[order(res$NitrateScore),]
res <- res[order(-res$NitrateScore),]
findNitrateGenes <- function(k, cluster){
genesK <- names(cluster[[1]][cluster[[1]]==k])
res <- data.frame(Gene = genesK)
res$entrez <- AGIToEntrez[match(res$Gene, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
res$Wang_2004 = ifelse(res$Gene %in% nGenes$Wang_2004, 1, 0)
res$Marchive_2013 = ifelse(res$Gene %in% nGenes$Marchive_2013_20min, 1, 0)
res$Widiez_2011 = ifelse(res$Gene %in% nGenes$HN_induced_Widiez_2011, 1, 0)
res[,c("Name", "Description")] <- ontologies[match(res$Gene, ontologies$ensembl_gene_id),c("external_gene_name", "description")]
res$NitrateScore <- rowSums(res[,grepl("_", colnames(res))])
res <- res[order(-res$NitrateScore),]
return(res)
}
findNitrateGenes(5,cluster)
a
setwd("~/Documents/ShinyApp/ClusteringAnalysis")
list.files("./Clusterings/")
list.files("./Clusterings/", full.names = F)
source("Functions/ClusterAnalysis.R")
source("Functions/ClusterAnalysis.R")
source("Functions/ClusterAnalysis.R")
shiny::runApp()
listFiles <- list.files("./Clusterings/", full.names = F)
names(listFiles = listFiles)
names(listFiles) = listFiles
list(listFiles)
listFiles <- list.files("./Clusterings/", full.names = F)
names(listFiles) = listFiles
listFiles
toList(listFiles)
files <- lapply(split(listFiles, names(listFiles)), unname)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(cluster[[1]])
runApp()
runApp()
runApp()
runApp()
melt
